---
export const prerender = true;

import BaseHead from "../components/BaseHead.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";

import Header from "../components/Header.astro";
import Landing from "../components/Landing.astro";
import Introduction from "../components/Introduction.astro";
import Experience from "../components/Experience.astro";
---

<!doctype html>
<html>
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <Landing />
    <Introduction />
    <Experience />

    <script>
      document.addEventListener("DOMContentLoaded", (event) => {
        const observer = new IntersectionObserver(
          (entries, observer) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                // Add a delay based on the element's position within all observed elements
                const elements = Array.from(
                  document.querySelectorAll(".container *")
                );
                const index = elements.indexOf(entry.target);
                const delay = index * 0.1; // Adjust the delay multiplier as needed

                entry.target.style.transitionDelay = `${delay}s`;
                entry.target.classList.add("in-view");

                // Optionally unobserve the element after it's in view
                observer.unobserve(entry.target);
              }
            });
          },
          {
            threshold: 1.0, // Adjust as needed
            rootMargin: "0px", // Adjust if you want to trigger before the element is in the viewport
          }
        );

        // Observe all elements within the container
        document.querySelectorAll(".container *").forEach((el) => {
          observer.observe(el);
        });
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const elementsToAnimate = document.querySelectorAll(".fade-in");

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add("in-view");
                observer.unobserve(entry.target);
              }
            });
          },
          {
            threshold: 0.1,
          }
        );

        elementsToAnimate.forEach((el) => {
          observer.observe(el);
        });
      });
    </script>
  </body>
</html>
